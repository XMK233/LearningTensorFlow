#coding=utf-8
# 系数都以八进制存在pb文件中
# 八进制：octal
import numpy as np
import tensorflow as tf
import os
import binascii
txt = "_\320\203\275p\020\31187r3\275\001!\244\275\007\256\237\274\216\243\213\275Z\227-\275\236\371\"\275\262\254\300;\251\276\013=\311\035\016\274N\034\375\274\322[I\275\232x5\273}\370\245\275\372\336U;\262\277\243\275.\360\277\274\336\277\376\272\316`,<\225\010q\275\006n\221\274-|\013\274\321M\363\275\317T\205\276v*\027\275\234\243\242\274%Ge\275\371\226J\275t[\375\274\200\366\2069\324\310\"\275>S\217\275\377u\307\274\356{g\275\314\272|\275T\302o\275+-\227<\274\274\211;\022\225\025\275\334t\227\274a\030\301\274\332w\002\276\341g*\275\316\260$\276\340\244\332\275os\223\275\010\3366=Z\231\017\275T\243\303\272\027.\306\275z\305\r\276\201X_\275\355y}\274\367\222\232\275}\021n\275/\316\232\274Z{\221\274O\010\323\274}\243\023\275\240\330`<\245\250\237\275\033\252\216\274\270\2746\273\310\342\023\275#\304\352<\023\005\t\275\0169\360\275HZ\003\276\361\352\016\276\352\257\357:`\243E\276\211\025\303<\252\345F\275J\265\274\273\251\327\216\275d>n\273O<\316:\r\014\314\273O\237\n\273;-\202\273\253\001\257\275\346|><\3769\242\274\322G\025<Z\217\006\275\023\226>=}A\304\275\205\331\227\274\246J)\274\346/\222\274\036u\323<L\357\367\274\254\257\310\275d\200\017:\264\267d\275Yj\035=\361k@\275<~\027\275b?\266\272*\305\225\274]:r<\350({\274t\t+\274)\346s\274\205\245i\275\220\341\r\270\302\263\320\274\361$4<5\326s\275\004\300b\2747y;\275\026\252\277<7\363\261\272\222o\004\275\200\001#\274\213\273\203\274?FF\274\301\025\213<\224\357\342\275=\216&\273\257\201*<\235+\235\275\203\370\020\274a\347 :\020\371\r\275\266\245\370\274{j\305\275\233u\005\274\007-\340\274\2303\204\274\2313\212<;U\022=/\273\'\273\t&\253\275\2152\"\274\244@Z\274\356\255.\274O\257\252<\352T\022\275\007\367\024\275\252C\203\275\320\376\025<\207\371\031\275\347#n\275\310\361@=q\337c<\227\237\325<\223\333{\275ih\375<A\363.\275s\234\307\274\254eL\275\237\235i\275H\335(\275\nk\247<}Pw\275zn\034;\320\276\242:\254\021=\2757\327\251<\204\322\307< [\345<\272\374O\275\201\260E\275\236.p\274\273\206o\274_\253C\275K)R=j\336\307\275l\240,\273f\277x\274L\203Y\275U\227\305\274\246o\201\274CH3\2758P\275<\0368Z\275[\376J<#H/\275|s;;\014\024\217\272\241\246\010\276r\366;=\014)v\274\375\351\204\275A\243\177<\322V\257\275d\020\006\275?Bu\275!!\250\274~\361\343\273\336`\243\274\000!\021\274N\375\323<\357\312\305\275)\352\221\275\242ZD\275=/(<;\250\222\274\365\037\"\276\274H\035;\346\206\214\275\303\233\321\274\242\333\021\2759C\312\271\004o\325\274\361I\375\273\304\274k=\233\010\027;\331\315\307\275\022|<\275\256\260\351\271\261V)<M\324\233\2750\031\342<;dF\274\\\267C\275Q\241\023\275R\354\235\275Pi.\274\261zx\275\007\267\263\274\0028&\275\007b\276\274\006\017K\275S\360t<m\374\n\275\353]!\275j\010\265<\335\327\313\273\322:\214\274\312Jj\274\250\243O<\032T\t\275\276d\300\275\370\322O\274\026O\000=\330Iq\2756\'l\274\337m\003\274\310@\311\274~\345\326<DTY\275+/\355\275\016@X=_G9<$\242r\275\334\221\352\274\311n\371\275\225w>\275<\3716\275^\373\232;p\204\212\273\244k2=\21687\276y\350\327\274`\010\271<\262:\315\275\352\253\202\274>\177\027\2739ud\275z\010\227\274\364\371\254\274`+\221\273\344/\023<g\247\'\275\367\330\360\274\202\277\237\275\003t\177<\346\350\2549\272\263d\275\246\377@\275>\327\236\275`kY\2753S<\275\014z\304\273\n\n\023\275\374\025\023\275\255\250\334\275LAe\275v\362j\275\016\366\226;\250\217w=^\206\374:\034\\%\274l\030-\276(\345\014\275\017\365\t\275G\257\206\275\330\341<\275\316\351\260;\255jo\273\321x\'\276\212\351T\275\250w\370\275\316\324\336;x\200\003<-\331\000=\260\261\241\275\362\221\331<\241|\321\275,\023\030\275\211\204\217\274\006\222A\274\373o\017=t\210\222\274w\203\363\275\033\003\327<\253\242\002\275`j\033<(\340\211\273VP\t\274^\3251\275\345\313\004\276(\362\321;\225\320\022\274\021\225\007\275\270\321\200\274\'\032!<\237\363\316\275\330\027\322\272\177^\204<\254\343\355\275\225{;\275-\315\265\274\321\035\204<\236-=\274\250\366M\275\20485=C+\004<\246g\\\2741\224\360<l\255\240;\004$\245\275\314\240\213\273\220\307\030\274M\235\225\2743\034\341\275\237\353\222\275}kK<\017\220\036\275\355V\262\275\027y\334<\352\255\004\276\210{\266\274hU\013\275+\361\032\2749eG\275\\\304t\2745\206\216\274\344\364\";\215=n\275\325\024\030\276\352\243\204\274\320\364\253;\356\230\250\275c\323\371\275\2518\334\275b\257\006\273\222\325:\275\317\312\212\275L\255S\275\276\013\301<\276\263\323\274\341Y\214\275-j\247\275\200@\232<\333\332\260;\355 \002\276\310\034Y\275\036\371\232=\323\213\240\272\336\330\216\274\253\326V\2731\323j\274\002\221\020\276M\316S\275\220\256J\275\212\r\201\275qY\316;\315\241\031\276\277\364n\275:\303\237\274\321\000\315;\307I\030\275\357x\003\275NS\203\272\020\203A\275\013a/\275\244\2322<=hT\275d[\204\275\273\024\306\273\321)o\275\307x\320;g\261\332\275\214\201\r=\360\211G\274{E<\275rnP;\220!\367\272\220\267\300\274\266\002Z\276\257hP<^\251\014\276\031;\226<f)\250\273\322\212\030<\241E\330\274\032\'O\275\226\317\345\275\374p\347<\366Q\351\275(\304\005\274\353\230O\275\r\177\216\274\276\245\025\275\371hY=\033\275\350\275\r\262:;\234E\244\275\350\035D\272\350\'p\275\222\207^\275\367\272\365;\305\260S\274#v^\275D ~\272)\216\243\275.\342\214\274d\226\310\275\317\363s\274\232\306\022\275\2708V<\326[\034\275\023\214\302<\334\313\324\275\335,\317<\332H\030\275l\205\311\274u\343\036\276\211H\022\274D\023\205\273Ur:\273\227\265\316\274\214\274\265;\242\3366\275\243\274\305<u\337J\274\212\321\230\275i\010\375\274o\362&\275\252\221q\275\332\255\177\274V\375\244\275\210la\275\237\337<\275\213dH=v\005\001\275\233g\211\275\2237\235<\024\035\352\274s\240\346\275\276\207M\275\330\237\020\271\357\rE\272\000\020b<\031aS\273\261q\336<\200\027|;\217\224m\27589\321;\312\374\243\275\355y\036\275c\341\341\275\344j\356\274Fo\340;\227ri\276\347\244p\274s\213\265;\265\211\\;\32302\275\256m\260\275\266\203\235;\034)\226\274`\354W<\256\223,\273\322(\024\275c\336G\2743\377\013;::\330\274 \n\224:\237\217x\275\227C\370\274\302\037-\275\355A\267\274\345\341\200\274\320#.=\326\260\372\273"
txt1 = "\341\303\026\153\155\271\161\166\030\054\324\011\046\035\344\274"
print(txt1.encode("utf-8"))
q = np.fromstring( b"\341\303\026\153\155\271\161\166\030\054\324\011\046\035\344\274" ,dtype=np.int32)
print(",".join(str(_) for _ in q))

# https://stackoverflow.com/questions/53085007/re-train-a-frozen-pb-model-in-tensorflow
'''print(os.getcwd())
with tf.gfile.GFile('MNIST_model/mnist_model.pb', 'rb') as f:
    graph_def = tf.GraphDef()
    graph_def.ParseFromString(f.read())

with tf.Graph().as_default() as graph:
    tf.import_graph_def(graph_def, name = "")
    writer = tf.summary.FileWriter('MNIST_model/out/', graph)
    writer.close()'''
# then $ tensorboard --logdir out/

# https://blog.csdn.net/TwT520Ly/article/details/80228970
# model = 'MNIST_model/mnist_model.pb'
# graph = tf.get_default_graph()
# graph_def = graph.as_graph_def()
# graph_def.ParseFromString(tf.gfile.FastGFile(model, 'rb').read())
# tf.import_graph_def(graph_def, name='graph')
# summaryWriter = tf.summary.FileWriter('log/', graph)